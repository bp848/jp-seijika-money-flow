datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AssetDetail {
  id                     String    @id @default(uuid())
  organization_report_id String
  asset_type             String?
  description            String?
  value                  BigInt?
  acquisition_date       DateTime? @db.Date
  remarks                String?
  source_document_page   String?
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt

  political_organization PoliticalOrganization @relation(fields: [organization_report_id], references: [report_id])

  @@map("asset_details")
}

model AuditDocument {
  id                     String    @id @default(uuid())
  organization_report_id String
  document_type          String?
  has_document           Boolean?
  auditor_name           String?
  audit_date             DateTime? @db.Date
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt

  political_organization PoliticalOrganization @relation(fields: [organization_report_id], references: [report_id])

  @@map("audit_documents")
}

model ChatMessage {
  id               String          @id @default(uuid())
  session_id       String?
  message_type     ChatMessageType
  content          String
  source_documents Json?           @db.JsonB
  created_at       DateTime?       @default(now()) @db.Timestamptz

  chat_session ChatSession? @relation(fields: [session_id], references: [id])

  @@map("chat_messages")
}

model ChatSession {
  id           String        @id @default(uuid())
  session_name String
  created_at   DateTime?     @default(now()) @db.Timestamptz
  updated_at   DateTime?     @default(now()) @db.Timestamptz @updatedAt
  messages     ChatMessage[]

  @@map("chat_sessions")
}

model DietMember {
  id           Int       @id @default(autoincrement())
  name         String
  party_id     Int?
  constituency String?
  elected_at   DateTime? @db.Date
  created_at   DateTime? @default(now())

  political_party PoliticalParty? @relation(fields: [party_id], references: [id])

  @@map("diet_members")
}

model DocumentEmbedding {
  id                 String    @id @default(uuid())
  document_id        String?
  embedding_vector   Json      @db.JsonB
  chunk_index        Int?      @default(0)
  chunk_text         String?
  created_at         DateTime? @default(now()) @db.Timestamptz
  updated_at         DateTime? @default(now()) @db.Timestamptz @updatedAt

  pdf_document PdfDocument? @relation(fields: [document_id], references: [id])

  @@map("document_embeddings")
}

model Donation {
  id           Int       @id @default(autoincrement())
  line_number  Int?
  donor_name   String?
  amount       Int?
  date         DateTime? @db.Date
  address      String?
  occupation   String?
  remarks      String?
  recipient_id Int?

  recipient Recipient? @relation(fields: [recipient_id], references: [id])

  @@map("donations")
}

model Entity {
  id          Int       @id @default(autoincrement())
  name        String
  entity_type String?
  address     String?
  created_at  DateTime? @default(now())

  transactions_source Transaction[] @relation("SourceEntityTransactions")
  transactions_target Transaction[] @relation("TargetEntityTransactions")

  @@map("entities")
}

model ExpenditureDetail {
  id                     String    @id @default(uuid())
  organization_report_id String
  category               String?
  item_name              String?
  purpose                String?
  amount                 BigInt?
  expenditure_date       DateTime? @db.Date
  payee_name             String?
  payee_address          String?
  remarks                String?
  source_document_page   String?
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt

  political_organization PoliticalOrganization @relation(fields: [organization_report_id], references: [report_id])

  @@map("expenditure_details")
}

model FinancialSummary {
  id                     String    @id @default(uuid())
  organization_report_id String
  prev_year_balance      BigInt?
  current_year_revenue   BigInt?
  total_revenue          BigInt?
  total_expenditure      BigInt?
  next_year_balance      BigInt?
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt

  political_organization PoliticalOrganization @relation(fields: [organization_report_id], references: [report_id])

  @@map("financial_summaries")
}

model FundFlow {
  id            String    @id @default(uuid())
  source_entity String
  target_entity String
  amount        BigInt
  flow_date     DateTime  @db.Date
  flow_type     String
  description   String?
  document_id   String?   @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz

  pdf_document PdfDocument? @relation(fields: [document_id], references: [id])

  @@map("fund_flows")
}

model FundManagementOrganization {
  id                BigInt    @id @default(autoincrement())
  politician_id     Int
  organization_name String
  office_type       String
  report_year       Int
  notified_date     DateTime? @db.Date
  jurisdiction      String    @default("総務大臣")
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @default(now()) @db.Timestamptz @updatedAt
  total_income      Decimal?
  total_expenditure Decimal?
  net_balance       Decimal?

  politician Politician @relation(fields: [politician_id], references: [id], map: "fk_politician")

  @@map("fund_management_organizations")
}

model MonitoredDocument {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  url          String?
  published_at DateTime? @db.Date
  created_at   DateTime? @default(now())

  @@map("monitored_documents")
}

model Organization {
  id           Int       @id @default(autoincrement())
  name         String
  type         String?
  address      String?
  established_on DateTime? @db.Date
  created_at   DateTime? @default(now())

  political_funds_organizations PoliticalFundsOrganization[]

  @@map("organizations")
}

model PartyBranch {
  id                  Int       @id @default(autoincrement())
  party_id            Int?
  name                String
  representative_name String?
  treasurer_name      String?
  branch_address      String?
  registered_on       DateTime? @db.Date
  created_at          DateTime? @default(now())
  total_income        Decimal?  @default(0)
  total_expenditure   Decimal?  @default(0)
  net_balance         Decimal?  @default(0)

  political_party PoliticalParty? @relation(fields: [party_id], references: [id])
  politicians     Politician[]

  @@map("party_branches")
}

model PdfDocument {
  id                      String    @id @default(uuid())
  file_name               String
  blob_url                String
  upload_datetime         DateTime? @default(now()) @db.Timestamptz
  party_name              String?   @default("不明")
  region                  String?   @default("不明")
  status                  PdfDocumentStatus? @default(pending_upload)
  error_message           String?
  file_size               BigInt?
  groq_index_id           String?
  created_at              DateTime? @default(now()) @db.Timestamptz
  updated_at              DateTime? @updatedAt @db.Timestamptz
  ocr_text                String?
  indexing_error_message  String?
  file_hash               String    @unique
  version                 Int       @default(1)
  year                    Int?
  party_id                Int?
  politician_id           Int?

  political_party PoliticalParty? @relation(fields: [party_id], references: [id], map: "fk_pdf_documents_party_id")
  politician      Politician?     @relation(fields: [politician_id], references: [id], map: "fk_pdf_documents_politician_id")
  document_embeddings DocumentEmbedding[]
  fund_flows          FundFlow[]
  processing_jobs     ProcessingJob[]


  @@map("pdf_documents")
}

model PoliticalFund {
  id                  Int       @id @default(autoincrement())
  name                String
  affiliated_party    String?
  representative_name String?
  treasurer_name      String?
  address             String?
  registered_on       DateTime? @db.Date
  created_at          DateTime? @default(now())
  total_income        Decimal?  @default(0)
  total_expenditure   Decimal?  @default(0)
  net_balance         Decimal?  @default(0)
  representative_id   Int?

  politician                    Politician?                  @relation(fields: [representative_id], references: [id], map: "fk_politician")
  political_funds_organizations PoliticalFundsOrganization[]

  @@map("political_funds")
}

model PoliticalFundsOrganization {
  id              Int       @id @default(autoincrement())
  fund_id         Int?
  organization_id Int?
  relationship    String?
  created_at      DateTime? @default(now())

  political_fund PoliticalFund? @relation(fields: [fund_id], references: [id])
  organization   Organization?  @relation(fields: [organization_id], references: [id])

  @@map("political_funds_organizations")
}

model PoliticalOrganization {
  id                     String    @id @default(uuid())
  report_id              String    @unique
  name                   String?
  address                String?
  representative_name    String?
  accountant_name        String?
  report_year            Int?
  raw_ocr_text           String?
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt
  asset_details          AssetDetail[]
  audit_documents        AuditDocument[]
  expenditure_details    ExpenditureDetail[]
  financial_summaries    FinancialSummary[]
  revenue_details        RevenueDetail[]

  @@map("political_organizations")
}

model PoliticalParty {
  id                   Int        @id @default(autoincrement())
  name                 String
  representative_name  String?
  treasurer_name       String?
  headquarters_address String?
  established_on       DateTime?  @db.Date
  created_at           DateTime?  @default(now())
  total_income         Decimal?   @default(0)
  total_expenditure    Decimal?   @default(0)
  net_balance          Decimal?   @default(0)
  diet_members         DietMember[]
  party_branches       PartyBranch[]
  pdf_documents        PdfDocument[]
  politicians          Politician[]

  @@map("political_parties")
}

model Politician {
  id                  Int       @id @default(autoincrement())
  name                String
  party_id            Int?
  branch_id           Int?
  elected_area        String?
  position            String?
  created_at          DateTime? @default(now())
  total_donations     BigInt?   @default(0)
  total_expenditures  BigInt?   @default(0)
  net_balance         BigInt?   // Prisma does not support computed defaults based on other fields directly
  last_updated        DateTime? @default(now()) @updatedAt
  legislature         String?
  profile_url         String?
  photo_url           String?
  term_end_date       DateTime? @db.Date
  election_years      String?
  current_positions   String?
  positions_as_of     DateTime? @db.Date
  biography           String?
  biography_as_of     DateTime? @db.Date
  external_id         String?
  status              String?   @default("active")
  name_kana           String?

  party_branch                 PartyBranch?                 @relation(fields: [branch_id], references: [id])
  political_party              PoliticalParty?              @relation(fields: [party_id], references: [id])
  fund_management_organizations FundManagementOrganization[]
  pdf_documents                PdfDocument[]
  political_funds              PoliticalFund[]

  @@map("politicians")
}

model ProcessingJob {
  id            String               @id @default(uuid())
  document_id   String               @db.Uuid
  job_type      ProcessingJobType
  status        ProcessingJobStatus  @default(pending)
  priority      Int                  @default(1)
  created_at    DateTime?            @default(now()) @db.Timestamptz
  started_at    DateTime?            @db.Timestamptz
  completed_at  DateTime?            @db.Timestamptz
  error_message String?
  retry_count   Int                  @default(0)
  max_retries   Int                  @default(3)

  pdf_document PdfDocument @relation(fields: [document_id], references: [id])

  @@map("processing_jobs")
}

model Recipient {
  id   Int        @id @default(autoincrement())
  name String
  type RecipientType?
  party String?

  donations Donation[]

  @@map("recipients")
}

model RevenueDetail {
  id                     String    @id @default(uuid())
  organization_report_id String
  category               String?
  item_name              String?
  amount                 BigInt?
  donor_name             String?
  donor_address          String?
  donor_occupation       String?
  donation_date          DateTime? @db.Date
  remarks                String?
  source_document_page   String?
  created_at             DateTime  @default(now()) @db.Timestamptz
  updated_at             DateTime  @default(now()) @db.Timestamptz @updatedAt

  political_organization PoliticalOrganization @relation(fields: [organization_report_id], references: [report_id])

  @@map("revenue_details")
}

model SystemLog {
  id          String         @id @default(uuid())
  process_id  String?        @db.Uuid
  file_name   String?
  step        String?
  status      String?
  message     String?
  error_stack String?
  metadata    Json?          @db.JsonB
  level       SystemLogLevel?
  timestamp   DateTime?      @default(now()) @db.Timestamptz
  created_at  DateTime?      @default(now()) @db.Timestamptz

  @@map("system_logs")
}

model Transaction {
  id                 Int       @id @default(autoincrement())
  source_entity_id   Int?
  target_entity_id   Int?
  amount             Decimal?
  transaction_type   String?
  occurred_on        DateTime? @db.Date
  created_at         DateTime? @default(now())

  target_entity Entity? @relation("TargetEntityTransactions", fields: [target_entity_id], references: [id])
  source_entity Entity? @relation("SourceEntityTransactions", fields: [source_entity_id], references: [id])

  @@map("transactions")
}

enum ChatMessageType {
  user
  assistant
}

enum PdfDocumentStatus {
  pending_upload
  duplicate
  processing_pipeline // New status for the batch job
  text_extraction_processing
  text_extraction_completed
  text_extraction_failed
  indexing_queued
  indexing_processing
  indexing_failed
  completed
}

enum ProcessingJobType {
  ocr
  indexing
  full_processing
}

enum ProcessingJobStatus {
  pending
  processing
  completed
  failed
}

enum RecipientType {
  個人
  政党支部
  政党本部
  その他
}

enum SystemLogLevel {
  INFO
  WARN
  ERROR
}
